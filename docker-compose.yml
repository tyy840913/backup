version: '3.8'

# 定义自定义网络
networks:
  docker_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/24 # 定义子网
          gateway: 172.20.0.1 # 定义网关（可选，但推荐）

services:

  # 1. Portainer - Docker 可视化管理
  portainer:
    image: docker.woskee.dpdns.org/6053537/portainer-ce:latest
    container_name: portainer
    restart: always
    # network_mode: bridge # 移除或注释掉此行，因为将使用自定义网络
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "9000:9000"
    networks:
      docker_network:
        ipv4_address: 172.20.0.10 # 为 Portainer 分配 IP

  # 2. openlist - 文件列表服务
  openlist:
    image: ghcr.nju.edu.cn/openlistteam/openlist-git:beta-aio
    container_name: openlist
    restart: always
    # network_mode: bridge # 移除或注释掉此行
    volumes:
      - /docker_data/openlist:/opt/openlist/data
    ports:
      - "5244:5244"
    environment:
      - TZ=Asia/Shanghai
    networks:
      docker_network:
        ipv4_address: 172.20.0.11 # 为 Openlist 分配 IP

  # 3. Lucky - 反向代理工具（Host 网络）
  # 注意：使用 host 网络模式的容器无法分配独立的 IP 地址，它们直接使用宿主机的 IP。
  lucky:
    image: docker.wosken.dpdns.org/gdy666/lucky:latest
    container_name: lucky
    restart: always
    network_mode: host # 保持 host 模式，因此无法分配静态 IP
    volumes:
      - /docker_data/luckyconf:/goodluck
    environment:
      - TZ=Asia/Shanghai
    # networks: # 如果是 host 模式，此处不能定义 networks 和 ipv4_address
    #   docker_network:
    #     ipv4_address: 172.20.0.12

  # 4. EasyNode - SSH 管理工具
  easynode:
    image: docker.luxxk.dpdns.org/chaoszhu/easynode:latest
    container_name: easynode
    restart: always
    # network_mode: bridge # 移除或注释掉此行
    ports:
      - "8082:8082"
    volumes:
      - /docker_data/easynode:/easynode/app/db
    environment:
      - TZ=Asia/Shanghai
    networks:
      docker_network:
        ipv4_address: 172.20.0.13 # 为 EasyNode 分配 IP

  # 5. Vaultwarden - 密码管理服务
  vaultwarden:
    image: docker.woskee.nyc.mn/vaultwarden/server:latest
    container_name: vaultwarden
    restart: always
    # network_mode: bridge # 移除或注释掉此行
    volumes:
      - /docker_data/bitwarden:/data
    ports:
      - 8081:80
    environment:
      - TZ=Asia/Shanghai
      - WEB_VAULT_ENABLED=true
      - SIGNUPS_ALLOWED=true
    networks:
      docker_network:
        ipv4_address: 172.20.0.14 # 为 Vaultwarden 分配 IP

  # 6. Watchtower - 自动更新容器
  # 注意：使用 host 网络模式的容器无法分配独立的 IP 地址，它们直接使用宿主机的 IP。
  watchtower:
    image: docker.wosken.dpdns.org/containrrr/watchtower:latest
    container_name: watchtower
    restart: always
    network_mode: host # 保持 host 模式，因此无法分配静态 IP
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - TZ=Asia/Shanghai
    command: --schedule "0 30 5 * * *" --cleanup --remove-volumes
    # networks: # 如果是 host 模式，此处不能定义 networks 和 ipv4_address
    #   docker_network:
    #     ipv4_address: 172.20.0.15

  # 7. subs-check 代理池（订阅合并）
  subs-check:
    image: ghcr.nju.edu.cn/beck-8/subs-check:latest
    container_name: subs-check
    volumes:
      - /docker_data/subs:/app/config
    ports:
      - "8199:8199"
      - "8299:8299"
    environment:
      - TZ=Asia/Shanghai
      # 设置 api-key
      - API_KEY=421121
    restart: always
    tty: true
    # network_mode: bridge # 移除或注释掉此行
    networks:
      docker_network:
        ipv4_address: 172.20.0.16 # 为 subs-check 分配 IP

  # 8. webssh 网页SSH工具
  cmliu-webssh:
    container_name: cmliu-webssh
    image: docker.woskee.nyc.mn/cmliu/webssh:latest
    ports:
    - "8888:8888"
    restart: always
    # network_mode: bridge # 移除或注释掉此行
    networks:
      docker_network:
        ipv4_address: 172.20.0.17 # 为 cmliu-webssh 分配 IP

  # 9. webssh 另一个网页ssh工具
  yorlg-webssh:
    image: docker.luxxk.dpdns.org/yorlg/webssh:latest
    container_name: yorlg-webssh
    ports:
      - "8080:8080"
    restart: always
    # network_mode: bridge # 移除或注释掉此行
    networks:
      docker_network:
        ipv4_address: 172.20.0.18 # 为 yorlg-webssh 分配 IP
