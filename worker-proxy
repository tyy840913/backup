// ==================== 全局配置 ====================
const CONFIG = {
  DEFAULT_PROTOCOL: 'https',          // 默认使用HTTPS
  USER_AGENT: 'Mozilla/5.0',         // 模拟浏览器UA
  RESOURCE_CACHE_TTL: 86400,         // 静态资源缓存时间(秒)
  MAX_REDIRECTS: 5,                  // 最大重定向次数
  PRESERVE_COOKIES: false,           // 默认不保留Cookie（合规性考虑）
  ALLOWED_DOMAINS: null              // 可设置为['example.com']限制仅代理特定域名
};

// ==================== 主逻辑 ====================
addEventListener('fetch', event => {
  event.respondWith(handleRequest(event));
});

async function handleRequest(event) {
  const request = event.request;
  const url = new URL(request.url);
  const workerDomain = url.hostname;

  try {
    // 首页显示使用说明
    if (url.pathname === '/') {
      return showUsagePage(workerDomain);
    }

    // 解析目标URL
    const { targetUrl, isProxied } = parseTargetUrl(url);
    if (!targetUrl) {
      return new Response('无效的URL格式', { status: 400 });
    }

    // 域名白名单检查（可选）
    if (CONFIG.ALLOWED_DOMAINS && !CONFIG.ALLOWED_DOMAINS.includes(targetUrl.hostname)) {
      return new Response('禁止代理该域名', { status: 403 });
    }

    // 构造上游请求
    const upstreamRequest = createUpstreamRequest(request, targetUrl);
    const response = await fetchWithRetry(upstreamRequest);

    // 处理重定向
    if ([301, 302, 303, 307, 308].includes(response.status)) {
      return handleRedirect(response, targetUrl, workerDomain);
    }

    // 处理响应
    return processResponse(event, response, targetUrl, workerDomain);

  } catch (err) {
    console.error(`[Proxy Error] ${err.stack}`);
    return new Response(`服务器错误: ${err.message}`, {
      status: 500,
      headers: { 'Content-Type': 'text/plain; charset=utf-8' }
    });
  }
}

// ==================== 核心功能 ====================

/**
 * 智能URL解析（支持所有格式）
 * 示例：
 * /https://example.com → https://example.com
 * /example.com/path → https://example.com/path
 * /http://proxy/http://target → 代理链模式
 */
function parseTargetUrl(url) {
  try {
    const rawPath = decodeURIComponent(url.pathname.slice(1));
    
    // 已包含协议的情况（代理链或完整URL）
    if (/^https?:\/\//i.test(rawPath)) {
      return {
        targetUrl: new URL(rawPath + url.search),
        isProxied: true
      };
    }

    // 自动补全协议
    const [domain, ...pathParts] = rawPath.split('/');
    if (!domain.includes('.')) {
      throw new Error('无效的域名格式');
    }

    return {
      targetUrl: new URL(`${CONFIG.DEFAULT_PROTOCOL}://${domain}/${pathParts.join('/')}${url.search}`),
      isProxied: false
    };
  } catch (e) {
    console.error(`[URL Parse Error] ${e.message}`);
    return { targetUrl: null };
  }
}

/**
 * 安全URL重写（保持页面功能）
 */
function rewriteUrl(urlStr, baseUrl, workerDomain) {
  if (!urlStr) return '';
  
  // 跳过特殊协议和锚点
  if (/^(data|blob|mailto|tel|javascript):/i.test(urlStr) || urlStr.startsWith('#')) {
    return urlStr;
  }

  const base = new URL(baseUrl);

  // 完整URL处理（http/https）
  if (/^https?:\/\//i.test(urlStr)) {
    // 已经是代理URL则保留原样
    if (urlStr.includes(`${workerDomain}/http`)) {
      return urlStr;
    }
    return `https://${workerDomain}/${urlStr.replace(/^https?:\/\//, '')}`;
  }

  // 协议相对URL（//example.com）
  if (urlStr.startsWith('//')) {
    return `https://${workerDomain}/${base.hostname}${urlStr}`;
  }

  // 绝对路径（/path）
  if (urlStr.startsWith('/')) {
    return `https://${workerDomain}/${base.hostname}${urlStr}`;
  }

  // 相对路径（path/to）
  return `https://${workerDomain}/${base.hostname}/${resolvePath(base.pathname, urlStr)}`;
}

/**
 * 路径解析（支持../和./）
 */
function resolvePath(basePath, relativePath) {
  const stack = basePath.split('/').filter(Boolean);
  const parts = relativePath.split('/');

  for (const part of parts) {
    if (part === '..') {
      stack.pop();
    } else if (part !== '.' && part !== '') {
      stack.push(part);
    }
  }

  return stack.join('/');
}

/**
 * 构造上游请求（自动处理Headers）
 */
function createUpstreamRequest(originalRequest, targetUrl) {
  const headers = new Headers(originalRequest.headers);
  
  // 关键头设置
  headers.set('Host', targetUrl.hostname);
  headers.set('User-Agent', CONFIG.USER_AGENT);
  headers.set('Referer', `${targetUrl.origin}/`);

  // 移除敏感头
  ['cf-connecting-ip', 'x-forwarded-for'].forEach(h => headers.delete(h));

  return new Request(targetUrl, {
    method: originalRequest.method,
    headers: headers,
    body: originalRequest.body,
    redirect: 'manual'
  });
}

// ==================== 响应处理 ====================

async function processResponse(event, response, baseUrl, workerDomain) {
  const contentType = response.headers.get('content-type') || '';
  const headers = cleanHeaders(response.headers, workerDomain);

  // 静态资源缓存
  if (shouldCache(response)) {
    event.waitUntil(caches.default.put(baseUrl, response.clone()));
  }

  // HTML文档处理
  if (contentType.includes('text/html')) {
    return processHtml(response, baseUrl, workerDomain, headers);
  }

  // CSS/JS文本处理
  if (contentType.match(/text\/(css|javascript)/)) {
    return processText(response, baseUrl, workerDomain, headers);
  }

  // 其他资源透传
  return new Response(response.body, { headers, status: response.status });
}

/**
 * HTML重写（使用HTMLRewriter）
 */
async function processHtml(response, baseUrl, workerDomain, headers) {
  const rewriter = new HTMLRewriter()
    .on('a[href]', new AttributeRewriter('href', baseUrl, workerDomain))
    .on('link[href]', new AttributeRewriter('href', baseUrl, workerDomain))
    .on('script[src]', new AttributeRewriter('src', baseUrl, workerDomain))
    .on('img[src]', new AttributeRewriter('src', baseUrl, workerDomain))
    .on('iframe[src]', new AttributeRewriter('src', baseUrl, workerDomain))
    .on('form[action]', new AttributeRewriter('action', baseUrl, workerDomain))
    .on('meta[http-equiv="refresh"]', {
      element: (e) => {
        const content = e.getAttribute('content');
        if (content?.includes('url=')) {
          e.setAttribute('content', content.replace(
            /url=(.*?)(;|$)/i, 
            (_, url) => `url=${rewriteUrl(url.trim(), baseUrl, workerDomain)};`
          ));
        }
      }
    })
    .on('style', {
      text: (text) => {
        text.replace = text.text.replace(
          /url$$(['"]?)([^)'"]+)\1$$/g, 
          (_, quote, url) => `url(${quote}${rewriteUrl(url, baseUrl, workerDomain)}${quote})`
        );
      }
    })
    .on('*[style]', {
      element: (e) => {
        const style = e.getAttribute('style');
        if (style) {
          e.setAttribute('style', style.replace(
            /url$$(['"]?)([^)'"]+)\1$$/g, 
            (_, quote, url) => `url(${quote}${rewriteUrl(url, baseUrl, workerDomain)}${quote})`
          ));
        }
      }
    });

  return rewriter.transform(new Response(response.body, { headers }));
}

/**
 * CSS/JS文本重写
 */
async function processText(response, baseUrl, workerDomain, headers) {
  const text = await response.text();
  const rewritten = text.replace(
    /url$$(['"]?)([^)'"]+)\1$$/g, 
    (_, quote, url) => `url(${quote}${rewriteUrl(url, baseUrl, workerDomain)}${quote})`
  );
  return new Response(rewritten, { headers });
}

// ==================== 工具类 ====================

class AttributeRewriter {
  constructor(attribute, baseUrl, workerDomain) {
    this.attribute = attribute;
    this.baseUrl = baseUrl;
    this.workerDomain = workerDomain;
  }

  element(element) {
    const value = element.getAttribute(this.attribute);
    if (value) {
      element.setAttribute(this.attribute, rewriteUrl(value, this.baseUrl, this.workerDomain));
    }
  }
}

// ==================== 辅助函数 ====================

function cleanHeaders(headers, workerDomain) {
  const h = new Headers(headers);
  
  // 移除破坏性头
  [
    'content-security-policy',
    'x-frame-options',
    'strict-transport-security',
    'x-content-type-options'
  ].forEach(header => h.delete(header));

  // 设置默认Content-Type
  if (!h.has('content-type')) {
    h.set('content-type', 'text/html; charset=utf-8');
  }

  // Cookie处理（可选）
  if (CONFIG.PRESERVE_COOKIES && h.has('set-cookie')) {
    const cookies = h.get('set-cookie').split(/\s*,\s*/);
    h.delete('set-cookie');
    cookies.forEach(cookie => {
      h.append('set-cookie', 
        cookie.replace(/domain=.*?(;|$)/i, `domain=${workerDomain};`)
             .replace(/path=\/[^;]*(;|$)/i, 'path=/;')
      );
    });
  }
  
  return h;
}

function shouldCache(response) {
  const contentType = response.headers.get('content-type') || '';
  return response.status === 200 && /(image|font|css|javascript)/.test(contentType);
}

async function fetchWithRetry(request, retries = 3, timeout = 10000) {
  for (let i = 0; i < retries; i++) {
    try {
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), timeout);
      const response = await fetch(request, { signal: controller.signal });
      clearTimeout(timeoutId);
      return response;
    } catch (err) {
      if (i === retries - 1) throw err;
      await new Promise(r => setTimeout(r, 1000 * (i + 1)));
    }
  }
}

function handleRedirect(response, baseUrl, workerDomain) {
  const location = response.headers.get('Location');
  if (!location) return response;

  const newLocation = rewriteUrl(location, baseUrl, workerDomain);
  return Response.redirect(newLocation, response.status);
}

// ==================== 使用说明页 ====================

function showUsagePage(workerDomain) {
  const html = `
    <!DOCTYPE html>
    <html lang="zh-CN">
    <head>
      <meta charset="UTF-8">
      <title>网页代理服务</title>
      <style>
        body { font-family: Arial, sans-serif; line-height: 1.6; max-width: 800px; margin: 0 auto; padding: 20px; }
        code { background: #f0f0f0; padding: 2px 4px; border-radius: 3px; }
        pre { background: #f8f8f8; padding: 10px; overflow-x: auto; }
        .example { margin: 15px 0; }
      </style>
    </head>
    <body>
      <h1>网页代理使用说明</h1>
      
      <div class="example">
        <h3>基本用法</h3>
        <pre><code>https://${workerDomain}/example.com
https://${workerDomain}/github.com/用户名</code></pre>
      </div>
      
      <div class="example">
        <h3>代理链模式</h3>
        <pre><code>https://${workerDomain}/http://代理服务器/http://目标网站</code></pre>
      </div>
      
      <p><strong>注意：</strong>请遵守相关法律法规，合理使用本服务。</p>
    </body>
    </html>
  `;
  return new Response(html, {
    headers: { 'Content-Type': 'text/html; charset=utf-8' }
  });
}
