#!/bin/bash
# U 盘自动安装 Debian 系统脚本（支持每次开机检查 SSH 和 IP）
# 版本: 3.0 (融合专业审查建议，最终稳定版)

set -e

# --- 1. 安全的磁盘选择 ---
clear
echo "警告：本操作将清空所选硬盘并安装 Debian 系统！"
echo ""
echo ">>> 可用的块设备列表："
lsblk -d -o NAME,SIZE,MODEL,TYPE | grep 'disk'

echo ""
read -p "请输入要安装系统的目标磁盘名称（例如: sda 或 nvme0n1）: " DISK_NAME
DISK="/dev/${DISK_NAME}"
PART="${DISK}1"

# 再次确认，防止误操作
echo ""
read -p "你选择了磁盘 $DISK。这会清空该磁盘上的所有数据！请再次确认 (输入 'yes' 继续): " final_confirm
[ "$final_confirm" != "yes" ] && echo "安装取消" && exit 1

# 获取 root 密码
while true; do
  echo ""
  echo "请输入 Debian 系统 root 密码（输入不显示）："
  read -s -p "请输入密码：" rootpw1; echo
  read -s -p "请再次输入确认：" rootpw2; echo
  [ "$rootpw1" = "$rootpw2" ] && break
  echo "两次密码不一致，请重试。"
done

# --- 2. 分区与格式化（已优化） ---
echo ">>> 正在分区 $DISK ..."
echo -e "o\nn\np\n1\n\n\na\nw" | fdisk "$DISK"

echo ">>> 通知内核重新读取分区表..."
partprobe "$DISK"

echo ">>> 等待分区 ${PART} 创建..."
timeout=15
while [ ! -b "$PART" ] && [ $timeout -gt 0 ]; do
  sleep 1
  timeout=$((timeout - 1))
done

if [ ! -b "$PART" ]; then
  echo "错误：分区 ${PART} 在 15 秒内未能创建成功！安装中止。"
  exit 1
fi
echo "分区 ${PART} 已找到。"

echo ">>> 格式化 ${PART} ..."
mkfs.ext4 -L DEBIAN_ROOT "$PART"

echo ">>> 挂载目标分区..."
mount "$PART" /mnt

echo ">>> 解压 Debian 系统..."
tar -xzf /autoinstall/debian-rootfs.tar.gz -C /mnt --no-same-owner

# --- 3. 绑定系统目录与 chroot 配置 ---
mount --bind /dev /mnt/dev
mount --bind /sys /mnt/sys
mount -t proc proc /mnt/proc

UUID=$(blkid -s UUID -o value "$PART")
echo "UUID=$UUID / ext4 defaults,errors=remount-ro 0 1" > /mnt/etc/fstab

# 【修复】获取不带路径的磁盘名，以便安全传递给 chroot
DISK_NAME_SHORT=$(basename "$DISK")
export DISK_NAME_SHORT

cat <<EOF | chroot /mnt /bin/bash
set -e

# 【修复】使用传递进来的变量安全地安装 GRUB
grub-install "/dev/\$DISK_NAME_SHORT"
update-grub

# 设置 root 密码
echo root:$rootpw1 | chpasswd

# 启用 SSH
sed -i 's/^#\?PermitRootLogin.*/PermitRootLogin yes/' /etc/ssh/sshd_config
sed -i 's/^#\?PasswordAuthentication.*/PasswordAuthentication yes/' /etc/ssh/sshd_config
systemctl enable ssh

# 写入 /root/set-static-ip.sh
# 【注意】请确保 rootfs 中已包含 iputils-ping, iproute2, isc-dhcp-client(或类似)
cat << 'EOSTATIC' > /root/set-static-ip.sh
#!/bin/bash
set -e

INTERFACE=\$(ip -o link show | awk -F': ' '{print \$2}' | grep -v lo | head -n 1)
if [ -z "\$INTERFACE" ]; then exit 1; fi

# SSH 检查
if ! grep -Eq '^PermitRootLogin\\s+yes' /etc/ssh/sshd_config || ! grep -Eq '^PasswordAuthentication\\s+yes' /etc/ssh/sshd_config; then
    sed -i -e 's/^#\\?PermitRootLogin.*/PermitRootLogin yes/' -e 's/^#\\?PasswordAuthentication.*/PasswordAuthentication yes/' /etc/ssh/sshd_config
    systemctl restart ssh
fi

# IP 检查与设置
CURRENT_IP=\$(ip addr show \$INTERFACE | grep 'inet ' | awk '{print \$2}' | cut -d/ -f1)
if [ -z "\$CURRENT_IP" ]; then
    dhclient -r \$INTERFACE >/dev/null 2>&1 || true
    dhclient \$INTERFACE >/dev/null 2>&1 || true
    sleep 5
    CURRENT_IP=\$(ip addr show \$INTERFACE | grep 'inet ' | awk '{print \$2}' | cut -d/ -f1)
    if [ -z "\$CURRENT_IP" ]; then exit 1; fi
fi

PREFIX=\$(echo \$CURRENT_IP | cut -d'.' -f1-3)
GATEWAY="\$PREFIX.1"
DNS="114.114.114.114"
TARGET_IP="\$PREFIX.254"

# 检查 .254 是否被占用
if ping -c 1 -W 1 "\$TARGET_IP" >/dev/null 2>&1; then
    TARGET_IP="\$PREFIX.253"
fi

if [ "\$CURRENT_IP" != "\$TARGET_IP" ]; then
    echo "设置静态 IP 为 \$TARGET_IP"
    ip addr flush dev \$INTERFACE
    ip addr add "\$TARGET_IP/24" dev \$INTERFACE
    ip link set \$INTERFACE up
    ip route add default via \$GATEWAY || true
    # 【修复】增强 resolv.conf 的写入方式
    rm -f /etc/resolv.conf
    echo "nameserver \$DNS" > /etc/resolv.conf
fi
EOSTATIC

chmod +x /root/set-static-ip.sh

# 写入 systemd 服务
# 【修复】使用 network.target 增强兼容性
cat << 'EOSVC' > /etc/systemd/system/fix-ssh-ip.service
[Unit]
Description=Check and Fix SSH & IP on Boot
After=network.target

[Service]
Type=oneshot
ExecStart=/root/set-static-ip.sh

[Install]
WantedBy=multi-user.target
EOSVC

systemctl enable fix-ssh-ip.service
EOF

# 卸载挂载点
echo ">>> 卸载所有挂载点..."
umount -l /mnt/dev /mnt/sys /mnt/proc
umount -l /mnt

echo ""
echo ">>> 安装完成，系统将在 10 秒后重启 <<<"
sleep 10
reboot
